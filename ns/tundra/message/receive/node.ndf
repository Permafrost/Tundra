<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="svc_type">flow</value>
  <value name="svc_subtype">default</value>
  <value name="svc_sigtype">java 3.5</value>
  <record name="svc_sig" javaclass="com.wm.util.Values">
    <record name="sig_in" javaclass="com.wm.util.Values">
      <value name="node_type">record</value>
      <value name="field_type">record</value>
      <value name="field_dim">0</value>
      <value name="nillable">true</value>
      <value name="form_qualified">false</value>
      <value name="is_global">false</value>
      <array name="rec_fields" type="record" depth="1">
      </array>
    </record>
    <record name="sig_out" javaclass="com.wm.util.Values">
      <value name="node_type">record</value>
      <value name="field_type">record</value>
      <value name="field_dim">0</value>
      <value name="nillable">true</value>
      <value name="form_qualified">false</value>
      <value name="is_global">false</value>
      <array name="rec_fields" type="record" depth="1">
      </array>
    </record>
  </record>
  <value name="node_comment">### tundra.message:receive

Receives arbitrary (XML or flat file) content and routes it to 
either the webMethods messaging subsystem via pub.publish:publish,
a JMS destination, or a direct service invocation.

The content can be specified as a string, byte array, IData document
java.io.InputStream, or org.w3c.dom.Node object.

This service is either intended to be invoked directly by clients 
via HTTP or FTP, or it can be wrapped by another service which 
specifies appropriate pipeline variables to control the routing of 
the content.

When invoked via HTTP, the service returns a 'text/plain' response 
body that is empty on success, or contains a message describing the
errors that occurred on failure, and an appropriate HTTP response 
code according to the following table:

Response                   | Reason
---------------------------|-------------------------------------------------------
202 Accepted               | Received content was routed successfully
400 Bad Request            | Received content was malformed
403 Forbidden              | Sender was denied access to route the received content
406 Not Acceptable         | Received content was not recognized (Unknown)
409 Conflict               | Received content was detected as a duplicate
422 Unprocessable Entity   | Received content failed validation
500 Internal Server Error  | All other errors that occur while processing

When invoked via transports other than HTTP, for example FTP, if the 
content is received successfully the service invocation will succeed 
and an empty response body is returned. If a security or any other 
exception is encountered, the service invocation will fail by 
rethrowing the exception.

When invoked by a wrapping service, an exceptions encountered will 
be thrown to the calling service. It is then the calling service's 
responsibility to set an appropriate response for the transport in 
question.

Refer to tundra.message.format:recognize for further details on how 
message formats are recognized by this service.
</value>
  <value name="stateless">no</value>
  <value name="caching">no</value>
  <value name="prefetch">no</value>
  <value name="cache_ttl">15</value>
  <value name="prefetch_level">1</value>
  <value name="template_type">html</value>
  <value name="audit_level">off</value>
  <value name="check_internal_acls">no</value>
  <value name="icontext_policy">$null</value>
  <value name="system_service">no</value>
  <value name="retry_max">0</value>
  <value name="retry_interval">0</value>
  <value name="svc_in_validator_options">none</value>
  <value name="svc_out_validator_options">none</value>
  <value name="auditoption">0</value>
  <record name="auditsettings" javaclass="com.wm.util.Values">
    <value name="document_data">0</value>
    <value name="startExecution">false</value>
    <value name="stopExecution">false</value>
    <value name="onError">true</value>
  </record>
</Values>
