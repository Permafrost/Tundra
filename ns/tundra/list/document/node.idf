<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="node_type">interface</value>
  <value name="node_nsName">tundra.list.document</value>
  <value name="shared">LyoqCiAqIFJldHVybnMgdGhlIGxpc3Qgb2YgaXRlbXMgdGhhdCBpbmNsdWRlIGFuZCBkbyBub3Qg
aW5jbHVkZSB0aGUgZ2l2ZW4gcmVndWxhciAKICogZXhwcmVzc2lvbiBvciBsaXRlcmFsIHN0cmlu
ZyBwYXR0ZXJuLgogKiAKICogQHBhcmFtIGlucHV0ICAgICAgICAgIFRoZSBJRGF0YVtdIGRvY3Vt
ZW50IGxpc3QgdG8gYmUgcHJvY2Vzc2VkLgogKiBAcGFyYW0ga2V5ICAgICAgICAgICAgVGhlIGtl
eSB3aG9zZSB2YWx1ZSB3aWxsIGJlIHVzZWQgZm9yIGZpbHRlcmluZy4KICogQHBhcmFtIGxpdGVy
YWxLZXkgICAgIFdoZXRoZXIgdGhlIGtleSBpcyBsaXRlcmFsIG9yIGZ1bGx5LXF1YWxpZmllZC4K
ICogQHBhcmFtIHBhdHRlcm4gICAgICAgIFRoZSBwYXR0ZXJuIHRvIGxvb2sgZm9yIGluIHRoZSBn
aXZlbiBkb2N1bWVudHMuCiAqIEBwYXJhbSBsaXRlcmFsUGF0dGVybiBXaGV0aGVyIHRoZSBwYXR0
ZXJuIGlzIGxpdGVyYWwgb3IgYSByZWd1bGFyIGV4cHJlc3Npb24uCiAqIEByZXR1cm4gICAgICAg
ICAgICAgICBBIHBhaXIgb2YgYXJyYXlzLCB0aGUgZmlyc3QgY29udGFpbmluZyB0aGUgSURhdGEg
ZG9jdW1lbnRzIAogKiAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBjb250YWluIHRoZSBwYXR0
ZXJuLCB0aGUgc2Vjb25kIGNvbnRhaW5zIHRoZSBJRGF0YSAKICogICAgICAgICAgICAgICAgICAg
ICAgIGRvY3VtZW50cyB0aGF0IGRvIG5vdCBjb250YWluIHRoZSBwYXR0ZXJuLgogKi8KcHVibGlj
IHN0YXRpYyBJRGF0YVtdW10gZmluZChJRGF0YVtdIGlucHV0LCBTdHJpbmcga2V5LCBib29sZWFu
IGxpdGVyYWxLZXksIFN0cmluZyBwYXR0ZXJuLCBib29sZWFuIGxpdGVyYWxQYXR0ZXJuKSB7CiAg
ICBpZiAoaW5wdXQgPT0gbnVsbCkgcmV0dXJuIG51bGw7CgogICAgTGlzdDxJRGF0YT4gZm91bmQg
PSBuZXcgQXJyYXlMaXN0PElEYXRhPihpbnB1dC5sZW5ndGgpOwogICAgTGlzdDxJRGF0YT4gdW5m
b3VuZCA9IG5ldyBBcnJheUxpc3Q8SURhdGE+KGlucHV0Lmxlbmd0aCk7CgogICAgZm9yIChJRGF0
YSBkb2N1bWVudCA6IGlucHV0KSB7CiAgICAgICAgU3RyaW5nIHZhbHVlID0gSURhdGFIZWxwZXIu
Z2V0KGRvY3VtZW50LCBrZXksIGxpdGVyYWxLZXksIFN0cmluZy5jbGFzcyk7CiAgICAgICAgaWYg
KFN0cmluZ0hlbHBlci5maW5kKHZhbHVlLCBwYXR0ZXJuLCBsaXRlcmFsUGF0dGVybikpIHsKICAg
ICAgICAgICAgZm91bmQuYWRkKGRvY3VtZW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAg
ICB1bmZvdW5kLmFkZChkb2N1bWVudCk7CiAgICAgICAgfQogICAgfQoKICAgIElEYXRhW11bXSBv
dXRwdXQgPSBuZXcgSURhdGFbMl1bXTsKICAgIG91dHB1dFswXSA9IGZvdW5kLnRvQXJyYXkobmV3
IElEYXRhW2ZvdW5kLnNpemUoKV0pOwogICAgb3V0cHV0WzFdID0gdW5mb3VuZC50b0FycmF5KG5l
dyBJRGF0YVt1bmZvdW5kLnNpemUoKV0pOwoKICAgIHJldHVybiBvdXRwdXQ7Cn0KCi8qKgogKiBS
ZXR1cm5zIHRoZSBsaXN0IG9mIGl0ZW1zIHRoYXQgbWF0Y2ggYW5kIGRpZCBub3QgbWF0Y2ggdGhl
IGdpdmVuIHJlZ3VsYXIgCiAqIGV4cHJlc3Npb24gb3IgbGl0ZXJhbCBzdHJpbmcgcGF0dGVybi4K
ICoKICogQHBhcmFtIGlucHV0ICAgICAgICAgIFRoZSBJRGF0YVtdIGRvY3VtZW50IGxpc3QgdG8g
YmUgcHJvY2Vzc2VkLgogKiBAcGFyYW0ga2V5ICAgICAgICAgICAgVGhlIGtleSB3aG9zZSB2YWx1
ZSB3aWxsIGJlIHVzZWQgZm9yIGZpbHRlcmluZy4KICogQHBhcmFtIGxpdGVyYWxLZXkgICAgIFdo
ZXRoZXIgdGhlIGtleSBpcyBsaXRlcmFsIG9yIGZ1bGx5LXF1YWxpZmllZC4KICogQHBhcmFtIHBh
dHRlcm4gICAgICAgIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIGFnYWluc3QgdGhlIGdpdmVuIGRvY3Vt
ZW50cy4KICogQHBhcmFtIGxpdGVyYWxQYXR0ZXJuIFdoZXRoZXIgdGhlIHBhdHRlcm4gaXMgbGl0
ZXJhbCBvciBhIHJlZ3VsYXIgZXhwcmVzc2lvbi4KICogQHJldHVybiAgICAgICAgICAgICAgIEEg
cGFpciBvZiBhcnJheXMsIHRoZSBmaXJzdCBjb250YWluaW5nIHRoZSBJRGF0YSBkb2N1bWVudHMg
CiAqICAgICAgICAgICAgICAgICAgICAgICB0aGF0IG1hdGNoIHRoZSBwYXR0ZXJuLCB0aGUgc2Vj
b25kIGNvbnRhaW5zIHRoZSBJRGF0YSAKICogICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50
cyB0aGF0IGRvIG5vdCBtYXRjaCB0aGUgcGF0dGVybi4KICovCnB1YmxpYyBzdGF0aWMgSURhdGFb
XVtdIG1hdGNoKElEYXRhW10gaW5wdXQsIFN0cmluZyBrZXksIGJvb2xlYW4gbGl0ZXJhbEtleSwg
U3RyaW5nIHBhdHRlcm4sIGJvb2xlYW4gbGl0ZXJhbFBhdHRlcm4pIHsKICAgIGlmIChpbnB1dCA9
PSBudWxsKSByZXR1cm4gbnVsbDsKCiAgICBMaXN0PElEYXRhPiBtYXRjaGVkID0gbmV3IEFycmF5
TGlzdDxJRGF0YT4oaW5wdXQubGVuZ3RoKTsKICAgIExpc3Q8SURhdGE+IHVubWF0Y2hlZCA9IG5l
dyBBcnJheUxpc3Q8SURhdGE+KGlucHV0Lmxlbmd0aCk7CgogICAgZm9yIChJRGF0YSBkb2N1bWVu
dCA6IGlucHV0KSB7CiAgICAgICAgU3RyaW5nIHZhbHVlID0gSURhdGFIZWxwZXIuZ2V0KGRvY3Vt
ZW50LCBrZXksIGxpdGVyYWxLZXksIFN0cmluZy5jbGFzcyk7CiAgICAgICAgaWYgKFN0cmluZ0hl
bHBlci5tYXRjaCh2YWx1ZSwgcGF0dGVybiwgbGl0ZXJhbFBhdHRlcm4pKSB7CiAgICAgICAgICAg
IG1hdGNoZWQuYWRkKGRvY3VtZW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB1bm1h
dGNoZWQuYWRkKGRvY3VtZW50KTsKICAgICAgICB9CiAgICB9CgogICAgSURhdGFbXVtdIG91dHB1
dCA9IG5ldyBJRGF0YVsyXVtdOwogICAgb3V0cHV0WzBdID0gbWF0Y2hlZC50b0FycmF5KG5ldyBJ
RGF0YVttYXRjaGVkLnNpemUoKV0pOwogICAgb3V0cHV0WzFdID0gdW5tYXRjaGVkLnRvQXJyYXko
bmV3IElEYXRhW3VubWF0Y2hlZC5zaXplKCldKTsKCiAgICByZXR1cm4gb3V0cHV0Owp9</value>
  <value name="encodeutf8">true</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
    <value>java.util.ArrayList</value>
    <value>java.util.EnumSet</value>
    <value>java.util.List</value>
    <value>java.util.Locale</value>
    <value>permafrost.tundra.data.IDataHelper</value>
    <value>permafrost.tundra.data.transform.string.Blankifier</value>
    <value>permafrost.tundra.data.transform.string.Capitalizer</value>
    <value>permafrost.tundra.data.transform.string.Condenser</value>
    <value>permafrost.tundra.data.transform.string.Lowercaser</value>
    <value>permafrost.tundra.data.transform.string.Nullifier</value>
    <value>permafrost.tundra.data.transform.string.Prefixer</value>
    <value>permafrost.tundra.data.transform.string.Replacer</value>
    <value>permafrost.tundra.data.transform.string.Squeezer</value>
    <value>permafrost.tundra.data.transform.string.Suffixer</value>
    <value>permafrost.tundra.data.transform.string.Trimmer</value>
    <value>permafrost.tundra.data.transform.string.Unprefixer</value>
    <value>permafrost.tundra.data.transform.string.Unsuffixer</value>
    <value>permafrost.tundra.data.transform.string.Uppercaser</value>
    <value>permafrost.tundra.data.transform.Transformer</value>
    <value>permafrost.tundra.data.transform.TransformerMode</value>
    <value>permafrost.tundra.flow.variable.SubstitutionHelper</value>
    <value>permafrost.tundra.flow.variable.SubstitutionType</value>
    <value>permafrost.tundra.lang.BooleanHelper</value>
    <value>permafrost.tundra.lang.StringHelper</value>
    <value>permafrost.tundra.util.regex.PatternHelper</value>
    <value>permafrost.tundra.util.regex.ReplacementHelper</value>
  </array>
</Values>
