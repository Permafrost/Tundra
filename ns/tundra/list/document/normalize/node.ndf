<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="svc_type">java</value>
  <value name="svc_subtype">unknown</value>
  <value name="svc_sigtype">java 3.5</value>
  <record name="svc_sig" javaclass="com.wm.util.Values">
    <record name="sig_in" javaclass="com.wm.util.Values">
      <value name="node_type">record</value>
      <value name="is_public">false</value>
      <value name="field_type">record</value>
      <value name="field_dim">0</value>
      <value name="nillable">true</value>
      <value name="form_qualified">false</value>
      <value name="is_global">false</value>
      <array name="rec_fields" type="record" depth="1">
        <record javaclass="com.wm.util.Values">
          <value name="node_type">record</value>
          <value name="node_comment"></value>
          <record name="node_hints" javaclass="com.wm.util.Values">
            <value name="field_largerEditor">false</value>
            <value name="field_password">false</value>
          </record>
          <value name="is_public">false</value>
          <value name="field_name">$list</value>
          <value name="field_type">record</value>
          <value name="field_dim">1</value>
          <value name="field_opt">true</value>
          <value name="nillable">true</value>
          <value name="form_qualified">false</value>
          <value name="is_global">false</value>
          <value name="is_soap_array_encoding_used">false</value>
          <array name="rec_fields" type="record" depth="1">
          </array>
          <value name="modifiable">true</value>
        </record>
      </array>
      <value name="modifiable">true</value>
    </record>
    <record name="sig_out" javaclass="com.wm.util.Values">
      <value name="node_type">record</value>
      <value name="is_public">false</value>
      <value name="field_type">record</value>
      <value name="field_dim">0</value>
      <value name="nillable">true</value>
      <value name="form_qualified">false</value>
      <value name="is_global">false</value>
      <array name="rec_fields" type="record" depth="1">
        <record javaclass="com.wm.util.Values">
          <value name="node_type">record</value>
          <value name="node_comment"></value>
          <record name="node_hints" javaclass="com.wm.util.Values">
            <value name="field_largerEditor">false</value>
            <value name="field_password">false</value>
          </record>
          <value name="is_public">false</value>
          <value name="field_name">$list</value>
          <value name="field_type">record</value>
          <value name="field_dim">1</value>
          <value name="field_opt">true</value>
          <value name="nillable">true</value>
          <value name="form_qualified">false</value>
          <value name="is_global">false</value>
          <value name="is_soap_array_encoding_used">false</value>
          <array name="rec_fields" type="record" depth="1">
          </array>
          <value name="modifiable">true</value>
        </record>
      </array>
      <value name="modifiable">true</value>
    </record>
  </record>
  <value name="node_comment">### tundra.list.document:normalize

Returns a new IData[] document list with all fully qualified keys (for
example, 'a/b/c' or 'x/y[0]/z[1]') deconstructed into their constituent
parts, and any non-IData objects converted to an IData representation
wherever possible.

For example, if an IData document contains the following key value pairs
(using [JSON] notation to represent the pipeline):

    {
      "a/b/c": "example 1",
      "a/b/d": "example 2",
      "e": "example 3",
      "f[0]": "example 4",
      "f[1]": "example 5"
    }

This is normalized to the following:

    {
      "a": {
        "b": {
          "c": "example 1",
          "d": "example 2"
        }
      },
      "e": "example 3",
      "f": ["example 4", "example 5"]
    }

Keys using path-style notation, for example a/b/c, are
converted to nested IData documents with the final key
in the path, c in this example, assigned the value of
the original key.

Keys using array- or list-style notation, for example f[0],
are converted to an array or list with the value of the
original key assigned to the indexed item (the zeroth item in
this example).


#### Inputs:

* $list is an IData[] document list to be normalized.
* $recurse? is an optional boolean indicating if embedded
  IData documents and IData[] document lists should also
  be normalized. Defaults to false.

#### Outputs:

* $list is the resulting normalized IData[] document list.</value>
  <value name="stateless">yes</value>
  <value name="caching">no</value>
  <value name="prefetch">no</value>
  <value name="cache_ttl">15</value>
  <value name="prefetch_level">1</value>
  <value name="template_type">html</value>
  <value name="audit_level">off</value>
  <value name="check_internal_acls">no</value>
  <value name="icontext_policy">$null</value>
  <value name="system_service">no</value>
  <value name="retry_max">0</value>
  <value name="retry_interval">0</value>
  <value name="svc_in_validator_options">default</value>
  <value name="svc_out_validator_options">default</value>
  <value name="auditoption">0</value>
  <null name="auditfields_input"/>
  <null name="auditfields_output"/>
  <record name="auditsettings" javaclass="com.wm.util.Values">
    <value name="document_data">0</value>
    <value name="startExecution">false</value>
    <value name="stopExecution">false</value>
    <value name="onError">true</value>
  </record>
  <value name="pipeline_option">1</value>
  <null name="originURI"/>
  <value name="modifiable">true</value>
  <value name="is_public">false</value>
</Values>
