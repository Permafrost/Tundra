<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="svc_type">java</value>
  <value name="svc_subtype">unknown</value>
  <value name="svc_sigtype">java 3.5</value>
  <record name="svc_sig" javaclass="com.wm.util.Values">
    <record name="sig_in" javaclass="com.wm.util.Values">
      <value name="node_type">record</value>
      <value name="field_type">record</value>
      <value name="field_dim">0</value>
      <value name="nillable">true</value>
      <value name="form_qualified">false</value>
      <value name="is_global">false</value>
      <array name="rec_fields" type="record" depth="1">
      </array>
    </record>
    <record name="sig_out" javaclass="com.wm.util.Values">
      <value name="node_type">record</value>
      <value name="field_type">record</value>
      <value name="field_dim">0</value>
      <value name="nillable">true</value>
      <value name="form_qualified">false</value>
      <value name="is_global">false</value>
      <array name="rec_fields" type="record" depth="1">
      </array>
    </record>
  </record>
  <value name="node_comment">### tundra.http.route:refresh

Reloads all configured custom HTTP routes from the server- and
package-specific configuration files.

Custom HTTP routes specify an [HTTP request method] and [URI
template] which, if matched by an Integration Server HTTP request,
will return the associated target (either by invoking the target if
it is a service in the same way as the built-in /invoke URIs work,
or by returning a DSP page or static asset if the target is not a
service), and can be used to abstract the API used by HTTP clients
from the implementation (unlike /invoke URIs or package DSP pages
URIs, which leak the implementation in the URI's path).

Custom HTTP routes can either be configured in a server-specific
configuration file, or a package-specific configuration file.

To register a server-specific custom HTTP route, create or edit the
&lt;IntegrationServer&gt;/config/http-routes.cnf file, using the
&lt;IntegrationServer&gt;/packages/Tundra/config/http-routes.example.cnf
file as a template.

To register a package-specific custom HTTP route, create or edit the
&lt;IntegrationServer&gt;/packages/&lt;PackageName&gt;/config/http-routes.cnf
file, using the
&lt;IntegrationServer&gt;/packages/Tundra/config/http-routes.example.cnf
file as a template.

Note that server-specific HTTP routes take precedence over package-specific
routes, and package-specific routes are loaded in lexical package name
order. Routing instructions inside each configuration file must be
specified in order of precedence, and all HTTP routes are aggregated into
a single routing table in Integration Server, and therefore care must be
taken so that routes specified across the various configuration files do
not override each other.

Changes to these HTTP route configuration files do not take effect
until this service is invoked, either manually or by reloading the
Tundra package.

[HTTP request method]: &lt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&gt;
[URI template]: &lt;https://tools.ietf.org/html/rfc6570&gt;</value>
  <value name="stateless">yes</value>
  <value name="caching">no</value>
  <value name="prefetch">no</value>
  <value name="cache_ttl">15</value>
  <value name="prefetch_level">1</value>
  <value name="template_type">html</value>
  <value name="audit_level">off</value>
  <value name="check_internal_acls">no</value>
  <value name="icontext_policy">$null</value>
  <value name="system_service">no</value>
  <value name="retry_max">0</value>
  <value name="retry_interval">0</value>
  <value name="svc_in_validator_options">none</value>
  <value name="svc_out_validator_options">none</value>
  <value name="auditoption">0</value>
  <record name="auditsettings" javaclass="com.wm.util.Values">
    <value name="document_data">0</value>
    <value name="startExecution">false</value>
    <value name="stopExecution">false</value>
    <value name="onError">true</value>
  </record>
</Values>
