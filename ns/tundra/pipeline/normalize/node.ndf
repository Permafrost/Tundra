<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="svc_type">java</value>
  <value name="svc_subtype">unknown</value>
  <value name="svc_sigtype">java 3.5</value>
  <record name="svc_sig" javaclass="com.wm.util.Values">
    <record name="sig_in" javaclass="com.wm.util.Values">
      <value name="node_type">record</value>
      <value name="field_type">record</value>
      <value name="field_dim">0</value>
      <value name="nillable">true</value>
      <value name="form_qualified">false</value>
      <value name="is_global">false</value>
      <array name="rec_fields" type="record" depth="1">
      </array>
    </record>
    <record name="sig_out" javaclass="com.wm.util.Values">
      <value name="node_type">record</value>
      <value name="field_type">record</value>
      <value name="field_dim">0</value>
      <value name="nillable">true</value>
      <value name="form_qualified">false</value>
      <value name="is_global">false</value>
      <array name="rec_fields" type="record" depth="1">
      </array>
    </record>
  </record>
  <value name="node_comment">### tundra.pipeline:normalize

Iterates over each element in the pipeline, deconstructing
all fully qualified keys into their constituent parts.

For example, if a pipeline contains the following key value
pairs (using [JSON] notation to represent the pipeline):

    {
      "a/b/c": "example 1",
      "a/b/d": "example 2",
      "e": "example 3",
      "f[0]": "example 4",
      "f[1]": "example 5"
    }

This is normalized to the following:

    {
      "a": {
        "b": {
          "c": "example 1",
          "d": "example 2"
        }
      },
      "e": "example 3",
      "f": ["example 4", "example 5"]
    }

Keys using path-style notation, for example "a/b/c", are
converted to nested IData documents with the final key
in the path, "c" in this example, assigned the value of
the original key.

Keys using array- or list-style notation, for example "f[0]",
are converted to an array or list with the value of the
original key assigned to the indexed item (the zeroth item in
this example).

[JSON]: &lt;http://www.json.org/&gt;</value>
  <value name="stateless">yes</value>
  <value name="caching">no</value>
  <value name="prefetch">no</value>
  <value name="cache_ttl">15</value>
  <value name="prefetch_level">1</value>
  <value name="template_type">html</value>
  <value name="audit_level">off</value>
  <value name="check_internal_acls">no</value>
  <value name="icontext_policy">$null</value>
  <value name="system_service">no</value>
  <value name="retry_max">0</value>
  <value name="retry_interval">0</value>
  <value name="svc_in_validator_options">none</value>
  <value name="svc_out_validator_options">none</value>
  <value name="auditoption">0</value>
  <record name="auditsettings" javaclass="com.wm.util.Values">
    <value name="document_data">0</value>
    <value name="startExecution">false</value>
    <value name="stopExecution">false</value>
    <value name="onError">true</value>
  </record>
</Values>
